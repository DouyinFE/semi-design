@use "sass:meta";
@use "animation.scss";
@use 'variables.scss';


$module: #{$prefix}-switch;

.#{$module} {
    box-sizing: border-box;
    display: inline-block;
    border-radius: variables.$radius-switch;
    border: $border-thickness-control variables.$color-switch_default-border-default solid;
    position: relative;
    cursor: pointer;
    background-color: variables.$color-switch_default-bg-default;
    // box-shadow: inset 0 0 0 0 $color-switch_default-bg-success;
    //transition: background-color $motion-switch-transitionDuration ease-in-out;
    transition: background-color animation.$transition_duration-switch-bg animation.$transition_function-switch-bg animation.$transition_delay_switch-bg;

    width: variables.$width-switch;
    height: variables.$height-switch;

    &:hover {
        background-color: variables.$color-switch_default-bg-hover;
    }

    &:active {
        border: $border-thickness-control variables.$color-switch_default-bg-active solid;
        .#{$module}-knob {
            width: variables.$width-switch_knob_active;
        }
    }

    &-focus {
        outline: variables.$width-switch-outline solid variables.$color-switch_primary-outline-focus;
    }

    &-checked {
        background-color: variables.$color-switch_checked-bg-default;

        &:hover {
            background-color: variables.$color-switch_checked-bg-hover;
        }

        .#{$module}-knob {
            transform: translateX(variables.$spacing-switch_checked-translateX);
        }

        &:active {
            .#{$module}-knob {
                transform: translateX(variables.$spacing-switch_checked-translateX - variables.$width-switch_knob_expand);
            }
        }
    }

    &-active {
        background-color: variables.$color-switch_checked-bg-active;
    }

    &-disabled {
        cursor: not-allowed;
        background-color: variables.$color-switch_disabled-bg-default;
        border: $border-thickness-control variables.$color-switch_disabled-border-default solid;

        &:hover {
            background-color: variables.$color-switch_disabled-bg-hover;
        }

        &:active {
            background-color: variables.$color-switch_disabled-bg-active;
            .#{$module}-knob {
                width: variables.$width-switch_knob_default;
            }
        }

        .#{$module}-knob {
            cursor: not-allowed;
            @include shadow-0;
            border: variables.$width-switch_knob_disabled-border variables.$color-switch_knob-border-default solid;
        }
        
        .#{$module}-native-control {
            pointer-events: none;
            cursor: not-allowed;
        }

        &.#{$module}-checked {
            border-color: variables.$color-switch_checked_disabled-border-default;
            background-color: variables.$color-switch_checked_disabled-bg-default;
            &:active {
                .#{$module}-knob {
                    transform: translateX(variables.$spacing-switch_checked-translateX);
                }
            }
            .#{$module}-knob {
                @include shadow-0;
                border: none;
            }
        }
    }

    &-disabled.#{$module}-loading:not(.#{$module}-checked) {
        &:hover {
            background-color: variables.$color-switch_spin_unchecked-bg-default;
        }
    }

    &-knob {
        @include shadow-knob;
        cursor: pointer;
        border-radius: variables.$width-switch_knob_default * 0.5;
        background-color: variables.$color-switch_knob-bg-default;
        box-sizing: border-box;
        position: absolute;
        left: variables.$spacing-switch_knob-left;
        right: auto;
        transition: transform variables.$motion-switch-transitionDuration ease-in-out, width variables.$motion-switch-transitionDuration ease-in-out;

        width: variables.$width-switch_knob_default;
        height: variables.$width-switch_knob_default;
        top: variables.$spacing-switch_knob-padding;
        transform: translateX(variables.$spacing-switch_unchecked-translateX);
    }

    &-native-control {
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: inherit;
        pointer-events: auto;
        margin: 0; // 消除ua样式影响
        position: absolute;
        top: 0;
        left: 0;

        &[type="checkbox"] {
            width: inherit;
            height: inherit;
        }
    }

    &-checked-text,
    &-unchecked-text {
        position: absolute;
        font-size: $font-size-small;
        height: 100%;
        width: 20px;
        @include all-center;
    }

    &-checked-text {
        color: variables.$color-switch_checked-text-default;
    }

    &-unchecked-text {
        color: variables.$color-switch_unchecked-text-default;
        right: 0;
    }

    &-loading {
        display: inline-flex;
        align-items: center;
        background-color: variables.$color-switch_spin_unchecked-bg-default;

        &-spin {
            .#{$prefix}-spin-wrapper{
                display: inline-flex;
                align-items: center;
                color: variables.$color-switch_loading_spin-default;
            }
        }
    }
}

.#{$module}-loading {

    .#{$module}-loading-spin {
        transform: translateX(variables.$spacing-switch_spin_unchecked-translateX);

        &>.#{$prefix}-spin-wrapper>svg{
            width: variables.$width-switch_spin-default;
            height: variables.$width-switch_spin-default;
        }
    }

    &.#{$module}-checked {
        background-color: variables.$color-switch_spin_checked-bg-default;

        .#{$module}-loading-spin {
            transform: translateX(variables.$spacing-switch_spin_checked-translateX);
        }
    }
}

.#{$module}-loading.#{$module}-small {

    .#{$module}-loading-spin {
        transform: translateX(variables.$spacing-switch_spin_unchecked_small-translateX);

        &>.#{$prefix}-spin-wrapper>svg{
            width: variables.$width-switch_spin-small;
            height: variables.$width-switch_spin-small;
        }
    }
    &.#{$module}-checked{

        .#{$module}-loading-spin {
            transform: translateX(variables.$spacing-switch_spin_checked_small-translateX);
        }
    }
}

.#{$module}-loading.#{$module}-large {

    .#{$module}-loading-spin {
        transform: translateX(variables.$spacing-switch_spin_unchecked_large-translateX);

        &>.#{$prefix}-spin-wrapper>svg{
            width: variables.$width-switch_spin-large;
            height: variables.$width-switch_spin-large;
        }
    }

    &.#{$module}-checked {

        .#{$module}-loading-spin {
            transform: translateX(variables.$spacing-switch_spin_checked_large-translateX);
        }
    }
}

.#{$module}-disabled.#{$module}-checked {
    background-color: variables.$color-switch_checked_disabled-bg-default;
}

.#{$module}-large {
    width: variables.$width-switch_large;
    height: variables.$height-switch_large;
    border-radius: variables.$radius-switch_large;
    .#{$module}-knob {
        width: variables.$width-switch_knob_large;
        height: variables.$width-switch_knob_large;
        top: variables.$spacing-switch_knob_large-padding;
        border-radius: variables.$width-switch_knob_large * 0.5;
        transform: translateX(variables.$spacing-switch_unchecked_large-translateX);
    }
    &.#{$module}-checked {
        .#{$module}-knob {
            transform: translateX(variables.$spacing-switch_checked_large-translateX);
        }

        &:active {
            .#{$module}-knob {
                transform: translateX(variables.$spacing-switch_checked_large-translateX - variables.$spacing-switch_expand_large-translateX);
            }
        }
    }

    &:active {
        .#{$module}-knob {
            width: variables.$width-switch_knob_large_active;
        }
    }
    .#{$module}-checked-text,
    .#{$module}-unchecked-text {
        width: variables.$width-switch_checked_unchecked_text;
        font-size: $font-size-regular;
    }
}

.#{$module}-small {
    width: variables.$width-switch_small;
    height: variables.$height-switch_small;
    border-radius: variables.$radius-switch_small;
    .#{$module}-knob {
        width: variables.$width-switch_knob_large_small;
        height: variables.$width-switch_knob_large_small;
        top: variables.$spacing-switch_knob_small-padding;
        border-radius: variables.$width-switch_knob_large_small * 0.5;
        transform: translateX(variables.$spacing-switch_unchecked_small-translateX);
    }
    &.#{$module}-checked {
        .#{$module}-knob {
            transform: translateX(variables.$spacing-switch_checked_small-translateX);
        }

        &:active {
            .#{$module}-knob {
                transform: translateX(variables.$spacing-switch_checked_small-translateX - variables.$spacing-switch_expand_small-translateX);
            }
        }
    }

    &:active {
        .#{$module}-knob {
            width: variables.$width-switch_knob_small_active;
        }
    }
}

.#{$prefix}-form {
    .#{$prefix}-switch-native-control {
        width: 100%;
        height: 100%;
    }
}

@include meta.load-css('rtl.scss');
